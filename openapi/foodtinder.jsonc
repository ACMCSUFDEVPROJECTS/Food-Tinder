{
  "openapi": "3.0.0",
  "info": {
    "version": "0.0.1",
    "title": "OpenAPI schema for Food-Tinder"
  },
  "servers": [
    {
      "url": "https://{hostname}/api/v0",
      "description": "Version 0 API path.",
      "variables": {
        "hostname": {
          "default": "localhost",
          "description": "The domain of the API backend server"
        }
      }
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "summary": "Log in using username and password. A 401 is returned if the information is incorrect.",
        "operationId": "login",
        "security": [],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string",
              "format": "password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logged in successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized returned when the user enters the wrong username and password combination.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Register using username and password",
        "operationId": "register",
        "security": [],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string",
              "format": "password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/FormError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users/self": {
      "get": {
        "summary": "Get the current user",
        "operationId": "getSelf",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Self"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get a user by their ID",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string",
              "format": "password"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/FormError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/posts": {
      "get": {
        "summary": "Get the next batch of posts",
        "operationId": "getNextPosts",
        "parameters": [
          {
            "name": "prev_id",
            "in": "query",
            "description": "The ID to start the pagination from, or empty to start from top.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/FormError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/posts/{id}": {
      "delete": {
        "summary": "Delete the current user's posts by ID. A 401 is returned if the user tries to delete someone else's post.",
        "operationId": "deletePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The post ID to delete.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All posts successfully deleted."
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/posts/liked": {
      "get": {
        "summary": "Get the list of posts liked by the user",
        "operationId": "getLikedPosts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/assets/{id}": {
      "get": {
        "summary": "Get the file asset by the given ID. Note that assets are not separated by type; the user must assume the type from the context that the asset ID is from.",
        "operationId": "getAsset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The asset ID to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "NotFoundError": {
        "description": "Resource indicated by a parameter (if any) isn't found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FormError"
            }
          }
        }
      },
      "UserError": {
        "description": "User error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "FormError": {
        "description": "Form error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FormError"
            }
          }
        }
      },
      "ServerError": {
        "description": "Unexpected server error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "description": "Error object returned on any error.",
        "example": {
          "message": "server blew up"
        },
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "FormError": {
        "description": "Error object returned on a form error.",
        "example": {
          "message": "missing username",
          "form_id": "username"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "form_id": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ID": {
        "description": "Snowflake ID.",
        "example": "953809515621527562",
        "type": "string",
        "x-go-type": "foodtinder.ID"
      },
      "LoginMetadata": {
        "description": "Optional metadata included on login.",
        "properties": {
          "user_agent": {
            "description": "The User-Agent used for logging in.",
            "example": "curl/7.64.1",
            "type": "string"
          }
        }
      },
      "Session": {
        "required": ["user_id", "token", "expiry", "metadata"],
        "properties": {
          "user_id": {
            "$ref": "#/components/schemas/ID"
          },
          "token": {
            "type": "string",
            "example": "WlvPXdNuyfttl8eSV67hkbsX51wLURzT"
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "$ref": "#/components/schemas/LoginMetadata"
          }
        }
      },
      "Self": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "$ref": "#/components/schemas/FoodPreferences"
          },
          {
            "required": ["birthday"],
            "properties": {
              "birthday": {
                "type": "string",
                "format": "date"
              }
            }
          }
        ]
      },
      "User": {
        "required": ["id", "name", "avatar"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "name": {
            "type": "string",
            "example": "food-tinder-user"
          },
          "avatar": {
            "type": "string",
            "example": "ypeBEsobvcr6wjGzmiPcTaeG7_gUfE5yuYB3ha_uSLs="
          },
          "bio": {
            "type": "string",
            "example": "Hello, world."
          }
        }
      },
      "FoodPreferences": {
        "required": ["likes", "prefers"],
        "properties": {
          "likes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["Rice", "Fish"]
          },
          "prefers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": {
              "Rice": ["Sushi Rice"],
              "Fish": ["Ahi Tuna", "Salmon"]
            }
          }
        }
      },
      "UserLikedPosts": {
        "required": ["posts", "remaining", "expires"],
        "properties": {
          "posts": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Posts maps post IDs to the time that the user liked.",
            "example": {
              "953809515621527562": "2018-08-24T14:15:22Z",
              "953809438236627014": "2018-08-24T14:15:48Z"
            }
          },
          "remaining": {
            "type": "number",
            "description": "Remaining is the number of likes allowed by the user until the Expires timestamp.",
            "example": 3
          },
          "expires": {
            "type": "string",
            "format": "date-time",
            "description": "Expires is the time that the rate limiter (the Remaining field) replenishes."
          }
        }
      },
      "Post": {
        "required": ["id", "user_id", "images", "description", "tags"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "user_id": {
            "$ref": "#/components/schemas/ID"
          },
          "cover_hash": {
            "type": "string",
            "example": "LEHV6nWB2yk8pyoJadR*.7kCMdnj"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["ypeBEsobvcr6wjGzmiPcTaeG7_gUfE5yuYB3ha_uSLs="]
          },
          "description": {
            "type": "string",
            "example": "Salmon roll for $8.\n\nPretty cheap for me."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["Salmon", "Sushi Rice"]
          },
          "location": {
            "type": "string",
            "description": "Location is the location where the post was made.",
            "example": "Fullerton, CA"
          }
        }
      }
    }
  }
}
