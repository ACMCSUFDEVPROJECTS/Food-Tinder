// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version (devel) DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/discord-gophers/goapi-gen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/render"
)

// Error object returned on any error
type Error struct {
	Message string `json:"message"`
}

// FoodPreferences defines model for FoodPreferences.
type FoodPreferences struct {
	Likes   []string                `json:"likes"`
	Prefers FoodPreferences_Prefers `json:"prefers"`
}

// FoodPreferences_Prefers defines model for FoodPreferences.Prefers.
type FoodPreferences_Prefers struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Snowflake ID
type ID int64

// Optional metadata included on login
type LoginMetadata struct {
	// The User-Agent used for logging in
	UserAgent *string `json:"user_agent,omitempty"`
}

// Post defines model for Post.
type Post struct {
	CoverHash   *string `json:"cover_hash,omitempty"`
	Description string  `json:"description"`

	// Snowflake ID
	ID     ID       `json:"id"`
	Images []string `json:"images"`
	Tags   []string `json:"tags"`

	// Snowflake ID
	UserID ID `json:"user_id"`
}

// Self defines model for Self.
type Self struct {
	// Embedded struct due to allOf(#/components/schemas/User)
	User `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Birthday openapi_types.Date `json:"birthday"`
}

// Session defines model for Session.
type Session struct {
	Expiry time.Time `json:"expiry"`

	// Optional metadata included on login
	Metadata *LoginMetadata `json:"metadata,omitempty"`
	Token    string         `json:"token"`

	// Snowflake ID
	UserID ID `json:"user_id"`
}

// User defines model for User.
type User struct {
	Avatar string  `json:"avatar"`
	Bio    *string `json:"bio,omitempty"`

	// Snowflake ID
	ID   ID     `json:"id"`
	Name string `json:"name"`
}

// UserLikedPosts defines model for UserLikedPosts.
type UserLikedPosts struct {
	Expires   time.Time            `json:"expires"`
	Posts     UserLikedPosts_Posts `json:"posts"`
	Remaining float32              `json:"remaining"`
}

// UserLikedPosts_Posts defines model for UserLikedPosts.Posts.
type UserLikedPosts_Posts struct {
	AdditionalProperties map[string]time.Time `json:"-"`
}

// Error object returned on any error
type N4xX Error

// LoginParams defines parameters for Login.
type LoginParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// RegisterParams defines parameters for Register.
type RegisterParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsersIDParams defines parameters for GetUsersID.
type GetUsersIDParams struct {
	Password string `json:"password"`
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
type Response struct {
	body        interface{}
	statusCode  int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.statusCode)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(statusCode int) *Response {
	resp.statusCode = statusCode
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// LoginJSON200Response is a constructor method for a Login response.
// A *Response is returned with the configured status code and content type from the spec.
func LoginJSON200Response(body Session) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// LoginJSON400Response is a constructor method for a Login response.
// A *Response is returned with the configured status code and content type from the spec.
func LoginJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  400,
		contentType: "application/json",
	}
}

// RegisterJSON200Response is a constructor method for a Register response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterJSON200Response(body Session) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// RegisterJSON400Response is a constructor method for a Register response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterJSON400Response(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  400,
		contentType: "application/json",
	}
}

// GetUsersSelfJSON200Response is a constructor method for a GetUsersSelf response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUsersSelfJSON200Response(body Self) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// GetUsersIDJSON200Response is a constructor method for a GetUsersID response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUsersIDJSON200Response(body User) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// Getter for additional properties for FoodPreferences_Prefers. Returns the specified
// element and whether it was found
func (a FoodPreferences_Prefers) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FoodPreferences_Prefers
func (a *FoodPreferences_Prefers) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FoodPreferences_Prefers to handle AdditionalProperties
func (a *FoodPreferences_Prefers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FoodPreferences_Prefers to handle AdditionalProperties
func (a FoodPreferences_Prefers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserLikedPosts_Posts. Returns the specified
// element and whether it was found
func (a UserLikedPosts_Posts) Get(fieldName string) (value time.Time, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserLikedPosts_Posts
func (a *UserLikedPosts_Posts) Set(fieldName string, value time.Time) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]time.Time)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserLikedPosts_Posts to handle AdditionalProperties
func (a *UserLikedPosts_Posts) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]time.Time)
		for fieldName, fieldBuf := range object {
			var fieldVal time.Time
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserLikedPosts_Posts to handle AdditionalProperties
func (a UserLikedPosts_Posts) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUW/jNgz+K4K2R6XJtmIPfivQ7RCgwxW7G3BAURwUi3Z0tSQfJbeXBf7vAyU7qWOn",
	"Tbdg2MOeqljiJ/L7KJLd8tyZ2lmwwfNsyxF87ayH+OPy0yf6kzsbwAZayrqudC6Ddnb+xTtL33y+BiNp",
	"9T1CwTP+3XyPOU+7fv4LokPetq3gCnyOuiYQnvE/PCCDbld0aPH6ZJJtDwziZ+ZWXyAPDCE0aEExZ5m0",
	"mw5I8BpdDRh0CsSA97IEWoZNDTzjPqC2ZbwR4WujERTP7nYH71vBf3VO3SIUgGDzhDNErfRDWugAxk+A",
	"i/6DRJQb+l1HvHhWKqUpIlndDlCPYaSARx4nJ/bI5PnyeszaB+ueiko+AFtec3Fwi+DfZqWbdR+1DT9f",
	"0s03rtT2NwhSySDHkO/r5D8z3RGmbV41KqlRkfFIicYDfpZll05DvI9rYJQNsyvaZ40HxQqHhFRqW7II",
	"d6hfK/it82GsTu4eAT+vpV9Psjq4emJfq9cyenkdzxlZvjULgizfaBFpO82lg/zQiu/Nd+4O4+88otT5",
	"AFURs7Oq3hc8u3v5PlKLt+KQ+pXGsFZyQ+vCoZGBZ1zJABP6Db3dWd63yRvvO4GGN8C3WuMYfxa0mbhE",
	"cPMsiV8KaJjxJIR7gOkE+fuS7NVI6KIPh0KOlI7ilY8ySJz0Y6XdP0pgK80JhTG6G4+K3pne2xv9AIre",
	"oD+iU1qeJlTd4xwrj6fBHNRMisVIbWl3H6ptzApwFGpy4bmJ2MVxHwuOtkXiXIcKYiEEe3W7ZInYWLOo",
	"ecw+aquAutEjYMpjvrhYXPxADrkarKw1z/hPF4uLBRVKGdYxxHkqnURmV9mIgNh0l4pnqSxHA5QGQuwn",
	"d1tOJvxrA7jppcpiqnWq7UMM2IB41rZH7PmwiXER1/F5T0HX0vsnh+pF6J1az06/ct29GA4hPy4WZxtC",
	"+noyMYbcuLIExbRlvslz8L5oqirW3svkwBTuztE5jUpxfGmMkVSZCJDQGk+tq9eBSavYjgsymCOU2ofu",
	"0U/q/Xt/4n/Jzyp5zyuoc2neI76uOm35ue+6bQlD2XlGn2IvFgfJ8A4CFV3fbU7xdrrz4lwcVwURPCTj",
	"HQQW1sDyBrGb52hYSKOm0UpV8CRjc7jjpvHhqglrh/rPNH13DG21ao8zFJvlMYbinHvwYMYD5/KauSL6",
	"2SSwmPhUi/d5r1/O+Nfb/3/iOXX/zf17aZGmw6m0kJFsttoQ8RpZmkROSYy2/SsAAP//AlYMAbIOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
