// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version (devel) DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/acmCSUFDev/Food-Tinder/backend/foodtinder"
	"github.com/discord-gophers/goapi-gen/pkg/runtime"
	openapi_types "github.com/discord-gophers/goapi-gen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// Error object returned on any error.
type Error struct {
	Message string `json:"message"`
}

// FoodPreferences defines model for FoodPreferences.
type FoodPreferences struct {
	Likes   []string                `json:"likes"`
	Prefers FoodPreferences_Prefers `json:"prefers"`
}

// FoodPreferences_Prefers defines model for FoodPreferences.Prefers.
type FoodPreferences_Prefers struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// FormError defines model for FormError.
type FormError struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	FormID *string `json:"form_id,omitempty"`
}

// Snowflake ID.
type ID foodtinder.ID

// Optional metadata included on login.
type LoginMetadata struct {
	// The User-Agent used for logging in.
	UserAgent *string `json:"user_agent,omitempty"`
}

// Post defines model for Post.
type Post struct {
	CoverHash   *string `json:"cover_hash,omitempty"`
	Description string  `json:"description"`

	// Snowflake ID.
	ID     ID       `json:"id"`
	Images []string `json:"images"`

	// Location is the location where the post was made.
	Location *string  `json:"location,omitempty"`
	Tags     []string `json:"tags"`

	// Snowflake ID.
	UserID ID `json:"user_id"`
}

// Self defines model for Self.
type Self struct {
	// Embedded struct due to allOf(#/components/schemas/User)
	User `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/FoodPreferences)
	FoodPreferences `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Birthday openapi_types.Date `json:"birthday"`
}

// Session defines model for Session.
type Session struct {
	Expiry time.Time `json:"expiry"`

	// Optional metadata included on login.
	Metadata LoginMetadata `json:"metadata"`
	Token    string        `json:"token"`

	// Snowflake ID.
	UserID ID `json:"user_id"`
}

// User defines model for User.
type User struct {
	Avatar string  `json:"avatar"`
	Bio    *string `json:"bio,omitempty"`

	// Snowflake ID.
	ID   ID     `json:"id"`
	Name string `json:"name"`
}

// Error object returned on any error.
type ServerError Error

// Error object returned on any error.
type UnauthorizedError Error

// LoginParams defines parameters for Login.
type LoginParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// NextPostsParams defines parameters for NextPosts.
type NextPostsParams struct {
	// The ID to start the pagination from, or empty to start from top.
	PrevID *ID `json:"prev_id,omitempty"`
}

// RegisterParams defines parameters for Register.
type RegisterParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	Password string `json:"password"`
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
type Response struct {
	body        interface{}
	statusCode  int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.statusCode)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(statusCode int) *Response {
	resp.statusCode = statusCode
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// LoginJSON200Response is a constructor method for a Login response.
// A *Response is returned with the configured status code and content type from the spec.
func LoginJSON200Response(body Session) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// LoginJSON400Response is a constructor method for a Login response.
// A *Response is returned with the configured status code and content type from the spec.
func LoginJSON400Response(body FormError) *Response {
	return &Response{
		body:        body,
		statusCode:  400,
		contentType: "application/json",
	}
}

// LoginJSON500Response is a constructor method for a Login response.
// A *Response is returned with the configured status code and content type from the spec.
func LoginJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  500,
		contentType: "application/json",
	}
}

// NextPostsJSON200Response is a constructor method for a NextPosts response.
// A *Response is returned with the configured status code and content type from the spec.
func NextPostsJSON200Response(body []User) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// GetLikedPostsJSON200Response is a constructor method for a GetLikedPosts response.
// A *Response is returned with the configured status code and content type from the spec.
func GetLikedPostsJSON200Response(body []Post) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// DeletePostsJSON401Response is a constructor method for a DeletePosts response.
// A *Response is returned with the configured status code and content type from the spec.
func DeletePostsJSON401Response(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  401,
		contentType: "application/json",
	}
}

// DeletePostsJSON500Response is a constructor method for a DeletePosts response.
// A *Response is returned with the configured status code and content type from the spec.
func DeletePostsJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  500,
		contentType: "application/json",
	}
}

// RegisterJSON200Response is a constructor method for a Register response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterJSON200Response(body Session) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// RegisterJSON400Response is a constructor method for a Register response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterJSON400Response(body FormError) *Response {
	return &Response{
		body:        body,
		statusCode:  400,
		contentType: "application/json",
	}
}

// RegisterJSON500Response is a constructor method for a Register response.
// A *Response is returned with the configured status code and content type from the spec.
func RegisterJSON500Response(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  500,
		contentType: "application/json",
	}
}

// GetSelfJSON200Response is a constructor method for a GetSelf response.
// A *Response is returned with the configured status code and content type from the spec.
func GetSelfJSON200Response(body Self) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// GetUserJSON200Response is a constructor method for a GetUser response.
// A *Response is returned with the configured status code and content type from the spec.
func GetUserJSON200Response(body User) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// Getter for additional properties for FoodPreferences_Prefers. Returns the specified
// element and whether it was found
func (a FoodPreferences_Prefers) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FoodPreferences_Prefers
func (a *FoodPreferences_Prefers) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FoodPreferences_Prefers to handle AdditionalProperties
func (a *FoodPreferences_Prefers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FoodPreferences_Prefers to handle AdditionalProperties
func (a FoodPreferences_Prefers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in using username and password
	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request, params LoginParams)
	// Get the next batch of posts
	// (GET /posts)
	NextPosts(w http.ResponseWriter, r *http.Request, params NextPostsParams)
	// Get the list of posts liked by the user
	// (GET /posts/liked)
	GetLikedPosts(w http.ResponseWriter, r *http.Request)
	// Delete the current user's posts by ID. A 401 is returned if the user tries to delete someone else's post.
	// (DELETE /posts/{id})
	DeletePosts(w http.ResponseWriter, r *http.Request, id ID)
	// Register using username and password
	// (POST /register)
	Register(w http.ResponseWriter, r *http.Request, params RegisterParams)
	// Get the current user
	// (GET /users/self)
	GetSelf(w http.ResponseWriter, r *http.Request)
	// Get a user by their ID
	// (GET /users/{id})
	GetUser(w http.ResponseWriter, r *http.Request, id ID, params GetUserParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginParams

	// ------------- Required query parameter "username" -------------

	if err := runtime.BindQueryParameter("form", true, true, "username", r.URL.Query(), &params.Username); err != nil {
		err = fmt.Errorf("invalid format for parameter username: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "username"})
		return
	}

	// ------------- Required query parameter "password" -------------

	if err := runtime.BindQueryParameter("form", true, true, "password", r.URL.Query(), &params.Password); err != nil {
		err = fmt.Errorf("invalid format for parameter password: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "password"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r, params)
	})

	handler(w, r.WithContext(ctx))
}

// NextPosts operation middleware
func (siw *ServerInterfaceWrapper) NextPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params NextPostsParams

	// ------------- Optional query parameter "prev_id" -------------

	if err := runtime.BindQueryParameter("form", true, false, "prev_id", r.URL.Query(), &params.PrevID); err != nil {
		err = fmt.Errorf("invalid format for parameter prev_id: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "prev_id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.NextPosts(w, r, params)
	})

	// Operation specific middleware
	handler = siw.Middlewares["mustAuthorize"](handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// GetLikedPosts operation middleware
func (siw *ServerInterfaceWrapper) GetLikedPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLikedPosts(w, r)
	})

	// Operation specific middleware
	handler = siw.Middlewares["mustAuthorize"](handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// DeletePosts operation middleware
func (siw *ServerInterfaceWrapper) DeletePosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id ID

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		err = fmt.Errorf("invalid format for parameter id: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePosts(w, r, id)
	})

	// Operation specific middleware
	handler = siw.Middlewares["mustAuthorize"](handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParams

	// ------------- Required query parameter "username" -------------

	if err := runtime.BindQueryParameter("form", true, true, "username", r.URL.Query(), &params.Username); err != nil {
		err = fmt.Errorf("invalid format for parameter username: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "username"})
		return
	}

	// ------------- Required query parameter "password" -------------

	if err := runtime.BindQueryParameter("form", true, true, "password", r.URL.Query(), &params.Password); err != nil {
		err = fmt.Errorf("invalid format for parameter password: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "password"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r, params)
	})

	handler(w, r.WithContext(ctx))
}

// GetSelf operation middleware
func (siw *ServerInterfaceWrapper) GetSelf(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSelf(w, r)
	})

	// Operation specific middleware
	handler = siw.Middlewares["mustAuthorize"](handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id ID

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		err = fmt.Errorf("invalid format for parameter id: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserParams

	// ------------- Required query parameter "password" -------------

	if err := runtime.BindQueryParameter("form", true, true, "password", r.URL.Query(), &params.Password); err != nil {
		err = fmt.Errorf("invalid format for parameter password: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "password"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, id, params)
	})

	// Operation specific middleware
	handler = siw.Middlewares["mustAuthorize"](handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	error
}

type UnmarshalingParamError struct {
	error
	paramName string
}

type RequiredParamError struct {
	error
	paramName string
}

type RequiredHeaderError struct {
	error
	paramName string
}

type InvalidParamFormatError struct {
	error
	paramName string
}

type TooManyValuesForParamError struct {
	error
	paramName string
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:     "/",
		BaseRouter:  chi.NewRouter(),
		Middlewares: make(map[string]func(http.Handler) http.Handler),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		Middlewares:      options.Middlewares,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	middlewares := []string{"mustAuthorize"}
	for _, m := range middlewares {
		if _, ok := wrapper.Middlewares[m]; !ok {
			panic("goapi-gen: could not find tagged middleware " + m)
		}
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Post("/login", wrapper.Login)
		r.Get("/posts", wrapper.NextPosts)
		r.Get("/posts/liked", wrapper.GetLikedPosts)
		r.Delete("/posts/{id}", wrapper.DeletePosts)
		r.Post("/register", wrapper.Register)
		r.Get("/users/self", wrapper.GetSelf)
		r.Get("/users/{id}", wrapper.GetUser)

	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithMiddleware(key string, middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares[key] = middleware
	}
}

func WithMiddlewares(middlewares map[string]func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/O+I+yfjxX8DAAD//woAn5I9GgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
